/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.testService.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.testService.model.TestNotice;
import com.testService.model.TestNoticeModel;
import com.testService.model.TestNoticeSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TestNotice service. Represents a row in the &quot;liferay_db_TestNotice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TestNoticeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestNoticeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TestNoticeImpl
 * @generated
 */
@JSON(strict = true)
public class TestNoticeModelImpl
	extends BaseModelImpl<TestNotice> implements TestNoticeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test notice model instance should use the <code>TestNotice</code> interface instead.
	 */
	public static final String TABLE_NAME = "liferay_db_TestNotice";

	public static final Object[][] TABLE_COLUMNS = {
		{"noticeId", Types.BIGINT}, {"noticeText", Types.VARCHAR},
		{"ownerId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("noticeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("noticeText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ownerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table liferay_db_TestNotice (noticeId LONG not null primary key,noticeText VARCHAR(75) null,ownerId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table liferay_db_TestNotice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY testNotice.noticeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY liferay_db_TestNotice.noticeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long OWNERID_COLUMN_BITMASK = 1L;

	public static final long NOTICEID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TestNotice toModel(TestNoticeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TestNotice model = new TestNoticeImpl();

		model.setNoticeId(soapModel.getNoticeId());
		model.setNoticeText(soapModel.getNoticeText());
		model.setOwnerId(soapModel.getOwnerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TestNotice> toModels(TestNoticeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TestNotice> models = new ArrayList<TestNotice>(soapModels.length);

		for (TestNoticeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TestNoticeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _noticeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNoticeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _noticeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TestNotice.class;
	}

	@Override
	public String getModelClassName() {
		return TestNotice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TestNotice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TestNotice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TestNotice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((TestNotice)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TestNotice, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TestNotice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TestNotice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TestNotice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TestNotice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TestNotice>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TestNotice.class.getClassLoader(), TestNotice.class,
			ModelWrapper.class);

		try {
			Constructor<TestNotice> constructor =
				(Constructor<TestNotice>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TestNotice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TestNotice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TestNotice, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TestNotice, Object>>();
		Map<String, BiConsumer<TestNotice, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TestNotice, ?>>();

		attributeGetterFunctions.put("noticeId", TestNotice::getNoticeId);
		attributeSetterBiConsumers.put(
			"noticeId", (BiConsumer<TestNotice, Long>)TestNotice::setNoticeId);
		attributeGetterFunctions.put("noticeText", TestNotice::getNoticeText);
		attributeSetterBiConsumers.put(
			"noticeText",
			(BiConsumer<TestNotice, String>)TestNotice::setNoticeText);
		attributeGetterFunctions.put("ownerId", TestNotice::getOwnerId);
		attributeSetterBiConsumers.put(
			"ownerId", (BiConsumer<TestNotice, Long>)TestNotice::setOwnerId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getNoticeId() {
		return _noticeId;
	}

	@Override
	public void setNoticeId(long noticeId) {
		_noticeId = noticeId;
	}

	@JSON
	@Override
	public String getNoticeText() {
		if (_noticeText == null) {
			return "";
		}
		else {
			return _noticeText;
		}
	}

	@Override
	public void setNoticeText(String noticeText) {
		_noticeText = noticeText;
	}

	@JSON
	@Override
	public long getOwnerId() {
		return _ownerId;
	}

	@Override
	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TestNotice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TestNotice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TestNotice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestNoticeImpl testNoticeImpl = new TestNoticeImpl();

		testNoticeImpl.setNoticeId(getNoticeId());
		testNoticeImpl.setNoticeText(getNoticeText());
		testNoticeImpl.setOwnerId(getOwnerId());

		testNoticeImpl.resetOriginalValues();

		return testNoticeImpl;
	}

	@Override
	public int compareTo(TestNotice testNotice) {
		long primaryKey = testNotice.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TestNotice)) {
			return false;
		}

		TestNotice testNotice = (TestNotice)obj;

		long primaryKey = testNotice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TestNoticeModelImpl testNoticeModelImpl = this;

		testNoticeModelImpl._originalOwnerId = testNoticeModelImpl._ownerId;

		testNoticeModelImpl._setOriginalOwnerId = false;

		testNoticeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TestNotice> toCacheModel() {
		TestNoticeCacheModel testNoticeCacheModel = new TestNoticeCacheModel();

		testNoticeCacheModel.noticeId = getNoticeId();

		testNoticeCacheModel.noticeText = getNoticeText();

		String noticeText = testNoticeCacheModel.noticeText;

		if ((noticeText != null) && (noticeText.length() == 0)) {
			testNoticeCacheModel.noticeText = null;
		}

		testNoticeCacheModel.ownerId = getOwnerId();

		return testNoticeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TestNotice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TestNotice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TestNotice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TestNotice)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TestNotice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TestNotice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TestNotice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TestNotice)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TestNotice>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _noticeId;
	private String _noticeText;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private long _columnBitmask;
	private TestNotice _escapedModel;

}